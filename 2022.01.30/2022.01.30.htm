<!DOCTYPE html>
<html lang="en">
    <head>
        <title>2022.01.30</title>
        <meta charset="UTF-8">
        <meta name="viewpor" content="width=device-width, initial-scale=1.0">
    </head>

    <h1>RESPONSIVE DIZAINAS</h1>
    <p>visada reikia isirasyti tag'a <!-- <meta charset="UTF-8" name="viewpor" content="width=device-width, initial-scale=1.0">--> kad lango dydis prisitaikytu prie ekrano dydzio (aktualu mobiliems). reikia visada 65 tag'q nurodyti</p>    
    <a href="https://www.w3schools.com/css/css_rwd_viewport.asp">Viewport</a>
    
    <p>Rsponsive - prisitaikymnas prie:
        1. ekrano 
            a) plociui (su pvs media) 
            b) auksciui
        2. zoom
        3. srifto dydis</p>
    
    <p>zoom'as keicia px dydi (ar kieki?)</p>
    
    <p>jeigu elemento matmenys nurodyti santkiniais dydziais, tai zoominant jis prisitaikys</p>
    
    <p>ar daryti santykini elemento dydi ar ne priklauso nuo dizaino. minusas santykinio - nebus galima priartinti</p>
    
    <h3>SRIFTO DYDIS</h3>
    
    <p>HTML turi srifto dydi pagal nutylejima is sakninio elemento <!--<HTML>--> tage</p>
    
    <p>nurodyti srifto dydi px yra blogai</p>
    
    <p>padding, margin, border - ok nurodyti px</p>

    <p>kuriant dizaina geria pradeti nuo dizaino mobilia, nes maziau vietos ty reikia galvoti kaip kuriant eilutemis (stulpialiams nera vietos), o veliau pritaikyti desktopui. galima daryti kelias media u=klausas, viena mob, kita kompui</p>
    <p></p>
    <p></p>
    <p></p>
    
    <a href="https://www.w3schools.com/cssref/css_units.asp">CSS Units</a>

    <p>verta naudoti %, em ir rem</p>
    
    <p>em - santykinis dydis su teviniu elementu, CSS matavimo vienetas. em'us patogu naudoti, kai yra nurodomas konteinerio sriftas</p>
    
    <p>jeigu paveiksliukas ra teksto dalis, gerai naudoti em'us nurodant dydi, taciau to nereikia daryti jeigu paveiksliukas yra dizaino dalis</p>
    
    <p>rem - root element ty dydziai nurodomi santykiu su sakninio elemento dydziu (galal nutylejima 16px)</p>
    
    <p>jeigu sunku nuspresti naudoti em ar rem, geriau naudotiu rem</p>
    
    <p>galima diva nurodyti rem'ais, o viduje esancius elementams naudoti em'us</p>
    
    <p>prie flex ir grid reiktu ateiti susipazinus su lenteliu, float ir pozicionavimo budais</p>

    <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">CSS Flex-box</a>
    <a href="https://css-tricks.com/snippets/css/complete-guide-grid/">CSS Grid</a>
    
    <p>pati pirma dizaina padarytui su Flex</p>
    
    <h1>VERTIKALUS LYGIAVIMAS</h1>

    <p>horizontalus lygiavimas - centervertikalus lygiavimas - middle</p>

    <p>vertical alignment leidzia sulygiuoti, kai inline elementai yra skirtingo aukscio</p>
    
    <p>div'as vertikaliai lygiuojamas kitu elementu atzvilgiu</p>
    
    <p>div'o viduje pagal nutylejima elementai vertikaliai nesilygiuos</p>
    
    <p>div'o viduje vertikaliai sulygiuoti galima per display table / display table -cell </p>
    
    <p>aukscio geriau nenurodyti 100%, o px isvis geriau vengti</p>
    
    <a href="https://en.wikipedia.org/wiki/Holy_grail_(web_design)">Holy grail (web design)</a>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>

    
        <a href=""></a>
        <a href=""></a>
    <a href=""></a>
    <a href=""></a>

</html>